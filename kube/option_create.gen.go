// Code generated by 'option-gen'. DO NOT EDIT.

package kube

import (
	prompt "github.com/c-bata/go-prompt"
)

var createOptions = []prompt.Suggest{
	{Text: "--allow-missing-template-keys", Description: "如果为真，在模板中字段或映射键缺失时忽略模板中的任何错误。仅适用于 golang 和 jsonpath 输出格式。 "},
	{Text: "--dry-run", Description: "如果为真，仅打印将要发送的对象，而不发送它。 "},
	{Text: "--edit", Description: "在创建之前编辑 API 资源 "},
	{Text: "-f", Description: "文件名、目录或用于创建资源的文件的 URL "},
	{Text: "--filename", Description: "文件名、目录或用于创建资源的文件的 URL "},
	{Text: "-k", Description: "处理 kustomization 目录。此标志不能与 -f 或 -R 一起使用。 "},
	{Text: "--kustomize", Description: "处理 kustomization 目录。此标志不能与 -f 或 -R 一起使用。 "},
	{Text: "-o", Description: "输出格式。其一 :  json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file."},
	{Text: "--output", Description: "输出格式。其一 :  json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file."},
	{Text: "--raw", Description: "向服务器发送 POST 请求的原始 URI。使用由 kubeconfig 文件指定的传输方式。 "},
	{Text: "--record", Description: "在资源注释中记录当前的 kubectl 命令。如果设置为 false，则不记录该命令。如果设置为 true，则记录该命令。如果未设置，则默认仅在已存在注释值的情况下更新现有值。 "},
	{Text: "-R", Description: "递归处理在 -f、--filename 中使用的目录。当您想要管理在同一目录中组织的相关清单时很有用。 "},
	{Text: "--recursive", Description: "递归处理在 -f、--filename 中使用的目录。当您想要管理在同一目录中组织的相关清单时很有用。 "},
	{Text: "--save-config", Description: "如果为真，当前对象的配置将保存在其注解中。否则，注解将保持不变。当您未来想要对该对象执行 `kubectl apply` 操作时，此标志很有用。 "},
	{Text: "-l", Description: "选择器（标签查询）用于筛选，支持 '='、'==' 和 '!=' 。（例如： -l key1=value1,key2=value2 ） "},
	{Text: "--selector", Description: "选择器（标签查询）用于筛选，支持 '='、'==' 和 '!=' 。（例如： -l key1=value1,key2=value2 ） "},
	{Text: "--template", Description: "当 `-o=go-template` 或 `-o=go-template-file` 时使用的模板字符串或模板文件的路径。该模板格式为 Go 语言模板 [http] : //golang.org/pkg/text/template/#pkg-overview]."},
	{Text: "--validate", Description: "如果为真，则在发送输入之前使用模式对其进行验证 "},
	{Text: "--windows-line-endings", Description: "仅在 --edit=true 时相关。默认为您所在平台原生的行结束符。 "},
}
