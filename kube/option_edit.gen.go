// Code generated by 'option-gen'. DO NOT EDIT.

package kube

import (
	prompt "github.com/c-bata/go-prompt"
)

var editOptions = []prompt.Suggest{
	{Text: "--allow-missing-template-keys", Description: "如果为真，当模板中缺少字段或映射键时，忽略模板中的任何错误。仅适用于 golang 和 jsonpath 输出格式。 "},
	{Text: "-f", Description: "文件名、目录或用于编辑资源的文件的 URL "},
	{Text: "--filename", Description: "文件名、目录或用于编辑资源的文件的 URL "},
	{Text: "-k", Description: "处理 kustomization 目录。此标志不能与 -f 或 -R 一起使用。 "},
	{Text: "--kustomize", Description: "处理 kustomization 目录。此标志不能与 -f 或 -R 一起使用。 "},
	{Text: "-o", Description: "输出格式。其一 :  json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file."},
	{Text: "--output", Description: "输出格式。其一 :  json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file."},
	{Text: "--output-patch", Description: "如果资源被编辑，输出补丁。 "},
	{Text: "--record", Description: "在资源注释中记录当前的 kubectl 命令。如果设置为 false，则不记录该命令。如果设置为 true，则记录该命令。如果未设置，默认情况下仅在已存在注释值时更新现有注释值。 "},
	{Text: "-R", Description: "对 -f 或 --filename 所使用的目录进行递归处理。在您想要管理组织在同一目录中的相关清单时很有用。 "},
	{Text: "--recursive", Description: "对 -f 或 --filename 所使用的目录进行递归处理。在您想要管理组织在同一目录中的相关清单时很有用。 "},
	{Text: "--save-config", Description: "如果为真，当前对象的配置将保存在其注解中。否则，注解将保持不变。此标志在您未来想要对该对象执行 kubectl apply 操作时很有用。 "},
	{Text: "--template", Description: "在 -o=go-template 或 -o=go-template-file 时使用的模板字符串或模板文件的路径。该模板格式为 Go 语言模板 [http] : //golang.org/pkg/text/template/#pkg-overview]."},
	{Text: "--validate", Description: "如果为真，则在发送输入之前使用模式来验证输入 "},
	{Text: "--windows-line-endings", Description: "默认为您所在平台原生的行结束符。 "},
}
