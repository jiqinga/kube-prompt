// Code generated by 'option-gen'. DO NOT EDIT.

package kube

import (
	prompt "github.com/c-bata/go-prompt"
)

var waitOptions = []prompt.Suggest{
	{Text: "--all", Description: "选择指定资源类型所在命名空间中的所有资源 "},
	{Text: "-A", Description: "如果存在，列出所有命名空间中的请求对象。即使使用 --namespace 指定，当前上下文中的命名空间也会被忽略。 "},
	{Text: "--all-namespaces", Description: "如果存在，列出所有命名空间中的请求对象。即使使用 --namespace 指定，当前上下文中的命名空间也会被忽略。 "},
	{Text: "--allow-missing-template-keys", Description: "如果为真，当模板中缺少字段或映射键时，忽略模板中的任何错误。仅适用于 golang 和 jsonpath 输出格式。 "},
	{Text: "--field-selector", Description: "选择器（字段查询）用于筛选，支持 '=' 、'==' 和 '!=' 。（例如 --field-selector key1=value1,key2=value2 ）。服务器针对每种类型仅支持有限数量的字段查询。 "},
	{Text: "-f", Description: "识别资源。 "},
	{Text: "--filename", Description: "识别资源。 "},
	{Text: "--for", Description: "等待的条件 :  [delete|condition=condition-name]."},
	{Text: "--local", Description: "如果为真，注释将不会联系 API 服务器，而是在本地运行。 "},
	{Text: "-o", Description: "输出格式。其中之一 :  json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file."},
	{Text: "--output", Description: "输出格式。其中之一 :  json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-file."},
	{Text: "-R", Description: "递归处理 -f 或 --filename 所使用的目录。当您想要管理在同一目录中组织的相关清单时，此功能很有用。 "},
	{Text: "--recursive", Description: "递归处理 -f 或 --filename 所使用的目录。当您想要管理在同一目录中组织的相关清单时，此功能很有用。 "},
	{Text: "-l", Description: "选择器（标签查询）用于筛选，支持 '='、'==' 和 '!=' 。（例如 -l key1=value1,key2=value2） "},
	{Text: "--selector", Description: "选择器（标签查询）用于筛选，支持 '='、'==' 和 '!=' 。（例如 -l key1=value1,key2=value2） "},
	{Text: "--template", Description: "当 `-o=go-template` 或 `-o=go-template-file` 时，用于使用的模板字符串或模板文件的路径。该模板格式为 Go 语言模板 [http] : //golang.org/pkg/text/template/#pkg-overview]."},
	{Text: "--timeout", Description: "等待放弃之前的时长。零表示检查一次且不等待，负数表示等待一周。 "},
}
